'use strict'

exports.__esModule = true
exports.default = exports.useMousePosition = void 0

var _react = require('react')

var _requestTimeout = require('@essentials/request-timeout')

var _hover = require('@react-hook/hover')

var _throttle = require('@react-hook/throttle')

const emptyArr = [],
  initialState = {
    x: null,
    y: null,
    pageX: null,
    pageY: null,
    clientX: null,
    clientY: null,
    screenX: null,
    screenY: null,
    elementWidth: null,
    elementHeight: null,
    isOver: false,
  }

const useMousePosition = (enterDelay = 0, leaveDelay = 0, fps = 30) => {
  const [state, setState] = (0, _react.useState)(initialState),
    entered = (0, _react.useRef)(false),
    element = (0, _react.useRef)(null),
    timeout = (0, _react.useRef)(null)
  const delay = (0, _react.useCallback)((amt, fn) => {
    if (!_hover.canHover) return
    timeout.current !== null &&
      (0, _requestTimeout.clearRequestTimeout)(timeout.current)

    if (amt) {
      timeout.current = (0, _requestTimeout.requestTimeout)(fn, amt)
    } else {
      fn()
    }
  }, emptyArr)

  const _onMove = (0, _react.useCallback)(e => {
    if (_hover.canHover === false || entered.current === false) return
    const {clientX, clientY, screenX, screenY, pageX, pageY} = e,
      rect = element.current.getBoundingClientRect()
    setState({
      x: pageX - rect.left - window.pageXOffset,
      y: pageY - rect.top - window.pageYOffset,
      pageX,
      pageY,
      clientX,
      clientY,
      screenX,
      screenY,
      elementWidth: rect.width,
      elementHeight: rect.height,
      isOver: true,
    })
  }, emptyArr)

  const onMove = (0, _throttle.useThrottleCallback)(_onMove, fps, true)
  const onEnter = (0, _react.useCallback)(
    e =>
      delay(enterDelay, () => {
        entered.current = true
        onMove(e)
      }),
    [enterDelay, delay]
  )
  const onLeave = (0, _react.useCallback)(
    () =>
      delay(leaveDelay, () => {
        entered.current = false
        setState(initialState)
      }),
    [leaveDelay, delay]
  )
  ;(0, _react.useEffect)(() => {
    if (element.current !== null) {
      element.current.addEventListener('mouseenter', onEnter)
      element.current.addEventListener('mousemove', onMove)
      element.current.addEventListener('mouseleave', onLeave)
    }

    return () => {
      timeout.current !== null &&
        (0, _requestTimeout.clearRequestTimeout)(timeout.current)
      timeout.current = null

      if (element.current !== null) {
        element.current.removeEventListener('mouseenter', onEnter)
        element.current.removeEventListener('mousemove', onMove)
        element.current.removeEventListener('mouseleave', onLeave)
      }
    }
  }, [element.current, onEnter, onLeave, onMove])
  return [element, state]
}

exports.useMousePosition = useMousePosition
var _default = useMousePosition
exports.default = _default
